install.packages(xlconnect)
install.packages("XLConnect")
library(XLConnect)
a <-readWorksheet(loadWorkbook("Z:\Data\RAW DATA_BAU_TT\Closed Aja\2012\Closed_MTTR_Detail_Monthly_120301.xlsx"),sheet=3)
a <-readWorksheet(loadWorkbook("Z:\\Data\\RAW DATA_BAU_TT\\Closed Aja\\2012\\Closed_MTTR_Detail_Monthly_120301.xlsx"),sheet=3)
a <-readWorksheet(loadWorkbook("Z:\\Data\\RAW DATA_BAU_TT\\Closed Aja\\2012\\Closed_MTTR_Detail_Monthly_120301.xlsx"),sheet=1)
install.packages("xlsx")
a <-read.xlsx("Z:\\Data\\RAW DATA_BAU_TT\\Closed Aja\\2012\\Closed_MTTR_Detail_Monthly_120301.xlsx"),sheet=1)
library(xlsx)
a <-read.xlsx("Z:\\Data\\RAW DATA_BAU_TT\\Closed Aja\\2012\\Closed_MTTR_Detail_Monthly_120301.xlsx"),1)
a <-read.xlsx("Z:\\Data\\RAW DATA_BAU_TT\\Closed Aja\\2012\\Closed_MTTR_Detail_Monthly_120301.xlsx",1)
install.packages("RJavaTools")
a <-read.xlsx("Z:\\Data\\RAW DATA_BAU_TT\\Closed Aja\\2012\\Closed_MTTR_Detail_Monthly_120301.xlsx",1)
shiny::runApp('D:/Google Drive/TM/TM/Buji/cei_demo')
shiny::runApp('D:/Google Drive/TM/TM/Buji/cei_demo')
shiny::runApp('D:/Google Drive/TM/TM/Buji/cei_demo')
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
shiny::runApp('D:/Google Drive/TM/TM/Buji/cei_demo')
package_df <- as.data.frame(installed.packages("/Library/Frameworks/R.framework/Versions/2.15/Resources/library"))
package_list <- as.character(package_df$Package)
## Re-install Install packages
install.packages(package_list)
package_df <- as.data.frame(installed.packages("/Library/Frameworks/R.framework/Versions/2.15/Resources/library"))
package_list <- as.character(package_df$Package)
## Re-install Install packages
install.packages(package_list)
shiny::runApp('D:/Google Drive/TM/TM/Buji/cei_demo')
shiny::runApp('D:/Google Drive/TM/TM/Buji/cei_demo')
shiny::runApp('D:/Google Drive/TM/TM/Buji/cei_demo')
shiny::runApp('D:/Google Drive/TM/TM/Buji/cei_demo')
shiny::runApp('D:/Google Drive/TM/TM/Buji/cei_demo')
shiny::runApp('D:/Google Drive/TM/TM/Buji/cei_demo')
shiny::runApp('D:/Google Drive/TM/TM/Buji/cei_demo')
shiny::runApp('D:/Google Drive/TM/TM/Buji/cei_demo')
citation()
citation("shiny")
setwd("D:/Google Drive/Coursera/capstone_yelt")
library(xlsx)
df <- read.xlsx("abi_tips_review.xls",1)
df <- as.data.frame(df$review)
names(df) = "review"
df <-as.data.frame(sapply(df,gsub,pattern="[[:digit:]]",replacement=""))
df <-as.data.frame(sapply(df,gsub,pattern="[[:punct:]]",replacement=""))
df <-as.data.frame(sapply(df,gsub,pattern="@\\w+",replacement=""))
View(df)
try.error = function(x)
{
# create missing value
y = NA
# tryCatch error
try_error = tryCatch(tolower(x), error=function(e) e)
# if not an error
if (!inherits(try_error, "error"))
y = tolower(x)
# result
return(y)
}
df = sapply(df, try.error)
df = df[!is.na(df)]
setwd("D:/Google Drive/Coursera/capstone_yelt")
library(xlsx)
df <- read.xlsx("abi_tips_review.xls",1)
df <- as.data.frame(df$review)
names(df) = "review"
df <-as.data.frame(sapply(df,gsub,pattern="[[:digit:]]",replacement=""))
df <-as.data.frame(sapply(df,gsub,pattern="[[:punct:]]",replacement=""))
df <-as.data.frame(sapply(df,gsub,pattern="@\\w+",replacement=""))
try.error = function(x)
{
# create missing value
y = NA
# tryCatch error
try_error = tryCatch(tolower(x), error=function(e) e)
# if not an error
if (!inherits(try_error, "error"))
y = tolower(x)
# result
return(y)
}
df = as.data.frame(sapply(df, try.error))
df = as.data.frame(df[!is.na(df)])
View(df)
View(df)
names(df) = "review"
df <-as.data.frame(sapply(df,gsub,pattern="^\\s+|\\s+$",replacement=""))
df <-as.data.frame(sapply(df,gsub,pattern="[ \t]{2,}",replacement=""))
View(df)
class_emo = classify_emotion(df, algorithm="bayes", prior=1.0)
library(sentiment)
install.packages("sentimen")
install.packages("sentiment")
library(tm.plugin.sentiment)
install.packages("tm.plugin.sentiment")
install_version("sentiment", version = "0.2", repos = "http://cran.us.r-project.org")
require(devtools)
install_version("sentiment", version = "0.2", repos = "http://cran.us.r-project.org")
library(sentiment)
class_emo = classify_emotion(df, algorithm="bayes", prior=1.0)
setwd("D:/Google Drive/Coursera/capstone_yelt")
library(xlsx)
library(sentiment)
df <- read.xlsx("abi_tips_review.xls",1)
df <- as.data.frame(df$review)
names(df) = "review"
df <-as.data.frame(sapply(df,gsub,pattern="[[:digit:]]",replacement=""))
df <-as.data.frame(sapply(df,gsub,pattern="[[:punct:]]",replacement=""))
df <-as.data.frame(sapply(df,gsub,pattern="@\\w+",replacement=""))
df <-as.data.frame(sapply(df,gsub,pattern="^\\s+|\\s+$",replacement=""))
df <-as.data.frame(sapply(df,gsub,pattern="[ \t]{2,}",replacement=""))
try.error = function(x)
{
# create missing value
y = NA
# tryCatch error
try_error = tryCatch(tolower(x), error=function(e) e)
# if not an error
if (!inherits(try_error, "error"))
y = tolower(x)
# result
return(y)
}
df = as.data.frame(sapply(df, try.error))
df = as.data.frame(df[!is.na(df)])
names(df) = "review"
class_emo = classify_emotion(df, algorithm="bayes", prior=1.0)
View(class_emo)
View(df)
View(class_emo)
df <- cbind(df,class_emo)
View(df)
setwd("D:/Google Drive/Coursera/capstone_yelt")
library(xlsx)
library(sentiment)
df <- read.xlsx("abi_tips_review.xls",1)
df <- as.data.frame(df$review)
names(df) = "review"
df <-as.data.frame(sapply(df,gsub,pattern="[[:digit:]]",replacement=""))
df <-as.data.frame(sapply(df,gsub,pattern="[[:punct:]]",replacement=""))
df <-as.data.frame(sapply(df,gsub,pattern="@\\w+",replacement=""))
df <-as.data.frame(sapply(df,gsub,pattern="^\\s+|\\s+$",replacement=""))
df <-as.data.frame(sapply(df,gsub,pattern="[ \t]{2,}",replacement=""))
try.error = function(x)
{
# create missing value
y = NA
# tryCatch error
try_error = tryCatch(tolower(x), error=function(e) e)
# if not an error
if (!inherits(try_error, "error"))
y = tolower(x)
# result
return(y)
}
df = as.data.frame(sapply(df, try.error))
df = as.data.frame(df[!is.na(df)])
names(df) = "review"
class_emo = classify_emotion(df, algorithm="bayes", prior=1.0)
View(df)
emotion = class_emo[,7]
emotion[is.na(emotion)] = "unknown"
class_pol = classify_polarity(df, algorithm="bayes")
# get polarity best fit
polarity = class_pol[,4]
View(class_pol)
sent_df = data.frame(text=df, emotion=emotion,
polarity=polarity, stringsAsFactors=FALSE)
View(sent_df)
df
head(df)
sent_df = within(sent_df,
emotion <- factor(emotion, levels=names(sort(table(emotion), decreasing=TRUE))))
View(sent_df)
# plot distribution of emotions
ggplot(sent_df, aes(x=emotion)) +
geom_bar(aes(y=..count.., fill=emotion)) +
scale_fill_brewer(palette="Dark2") +
labs(x="emotion categories", y="number of tweets") +
opts(title = "Sentiment Analysis of Tweets about Starbucks\n(classification by emotion)",
plot.title = theme_text(size=12))
library(ggplot2)
# plot distribution of emotions
ggplot(sent_df, aes(x=emotion)) +
geom_bar(aes(y=..count.., fill=emotion)) +
scale_fill_brewer(palette="Dark2") +
labs(x="emotion categories", y="number of tweets") +
opts(title = "Sentiment Analysis of Tweets about Starbucks\n(classification by emotion)",
plot.title = theme_text(size=12))
# plot distribution of emotions
ggplot(sent_df, aes(x=emotion)) +
geom_bar(aes(y=..count.., fill=emotion)) +
scale_fill_brewer(palette="Dark2") +
labs(x="emotion categories", y="number of tweets") +
theme(title = "Sentiment Analysis of Tweets about Starbucks\n(classification by emotion)",
plot.title = theme_text(size=12))
# plot distribution of emotions
ggplot(sent_df, aes(x=emotion)) +
geom_bar(aes(y=..count.., fill=emotion)) +
scale_fill_brewer(palette="Dark2") +
labs(x="emotion categories", y="number of tweets") +
theme(title = "Sentiment Analysis of Tweets about Starbucks\n(classification by emotion)",
plot.title = element_text(size=12))
ggplot(sent_df, aes(x=emotion)) +
geom_bar(aes(y=..count.., fill=emotion)) +
scale_fill_brewer(palette="Dark2") +
labs(x="emotion categories", y="number of tweets") +
theme(title = "Sentiment Analysis of Tweets about Starbucks\n(classification by emotion)")
ggplot(sent_df, aes(x=emotion)) +
geom_bar(aes(y=..count.., fill=emotion)) +
scale_fill_brewer(palette="Dark2") +
labs(x="emotion categories", y="number of tweets")
setwd("D:/Google Drive/Coursera/capstone_yelt")
library(ggplot2)
library(xlsx)
library(sentiment)
df <- read.xlsx("abi_tips_review.xls",1)
df <- as.data.frame(df$review)
names(df) = "review"
df <-as.data.frame(sapply(df,gsub,pattern="[[:digit:]]",replacement=""))
df <-as.data.frame(sapply(df,gsub,pattern="[[:punct:]]",replacement=""))
df <-as.data.frame(sapply(df,gsub,pattern="@\\w+",replacement=""))
df <-as.data.frame(sapply(df,gsub,pattern="^\\s+|\\s+$",replacement=""))
df <-as.data.frame(sapply(df,gsub,pattern="[ \t]{2,}",replacement=""))
try.error = function(x)
{
# create missing value
y = NA
# tryCatch error
try_error = tryCatch(tolower(x), error=function(e) e)
# if not an error
if (!inherits(try_error, "error"))
y = tolower(x)
# result
return(y)
}
df = as.data.frame(sapply(df, try.error))
df = as.data.frame(df[!is.na(df)])
names(df) = "review"
class_emo = classify_emotion(df, algorithm="bayes", prior=1.0)
emotion = class_emo[,7]
emotion[is.na(emotion)] = "unknown"
class_pol = classify_polarity(df, algorithm="bayes")
# get polarity best fit
polarity = class_pol[,4]
# data frame with results
sent_df = data.frame(text=df, emotion=emotion,
polarity=polarity, stringsAsFactors=FALSE)
sent_df = within(sent_df,
emotion <- factor(emotion, levels=names(sort(table(emotion), decreasing=TRUE))))
# plot distribution of emotions
ggplot(sent_df, aes(x=emotion)) +
geom_bar(aes(y=..count.., fill=emotion)) +
scale_fill_brewer(palette="Dark2") +
labs(x="emotion categories", y="number of tweets")
setwd("D:/Google Drive/Coursera/capstone_yelt")
library(ggplot2)
library(xlsx)
library(sentiment)
df <- read.xlsx("abi_tips_review.xls",1)
df <- as.data.frame(df$review)
names(df) = "review"
df <-as.data.frame(sapply(df,gsub,pattern="[[:digit:]]",replacement=""))
df <-as.data.frame(sapply(df,gsub,pattern="[[:punct:]]",replacement=""))
df <-as.data.frame(sapply(df,gsub,pattern="@\\w+",replacement=""))
df <-as.data.frame(sapply(df,gsub,pattern="^\\s+|\\s+$",replacement=""))
df <-as.data.frame(sapply(df,gsub,pattern="[ \t]{2,}",replacement=""))
try.error = function(x)
{
# create missing value
y = NA
# tryCatch error
try_error = tryCatch(tolower(x), error=function(e) e)
# if not an error
if (!inherits(try_error, "error"))
y = tolower(x)
# result
return(y)
}
df = as.data.frame(sapply(df, try.error))
df = as.data.frame(df[!is.na(df)])
names(df) = "review"
class_emo = classify_emotion(df, algorithm="bayes", prior=1.0)
emotion = class_emo[,7]
emotion[is.na(emotion)] = "unknown"
class_pol = classify_polarity(df, algorithm="bayes")
# get polarity best fit
polarity = class_pol[,4]
# data frame with results
sent_df = data.frame(text=df, emotion=emotion,
polarity=polarity, stringsAsFactors=FALSE)
sent_df = within(sent_df,
emotion <- factor(emotion, levels=names(sort(table(emotion), decreasing=TRUE))))
# plot distribution of emotions
ggplot(sent_df, aes(x=emotion)) +
geom_bar(aes(y=..count.., fill=emotion)) +
scale_fill_brewer(palette="Dark2") +
labs(x="emotion categories", y="number of tweets")
ggplot(sent_df, aes(x=polarity)) +
geom_bar(aes(y=..count.., fill=polarity)) +
scale_fill_brewer(palette="RdGy") +
labs(x="polarity categories", y="number of tweets") +
opts(title = "Sentiment Analysis of Tweets about Starbucks\n(classification by polarity)",
plot.title = theme_text(size=12))
ggplot(sent_df, aes(x=polarity)) +
geom_bar(aes(y=..count.., fill=polarity)) +
scale_fill_brewer(palette="RdGy") +
labs(x="polarity categories", y="number of tweets")
ggplot(sent_df, aes(x=polarity)) +
geom_bar(aes(y=..count.., fill=polarity)) +
scale_fill_brewer(palette="RdGy") +
labs(x="polarity categories", y="number of tweets")
emos = levels(factor(sent_df$emotion))
nemo = length(emos)
emo.docs = rep("", nemo)
for (i in 1:nemo)
{
tmp = some_txt[emotion == emos[i]]
emo.docs[i] = paste(tmp, collapse=" ")
}
# remove stopwords
emo.docs = removeWords(emo.docs, stopwords("english"))
# create corpus
corpus = Corpus(VectorSource(emo.docs))
tdm = TermDocumentMatrix(corpus)
tdm = as.matrix(tdm)
colnames(tdm) = emos
# comparison word cloud
comparison.cloud(tdm, colors = brewer.pal(nemo, "Dark2"),
scale = c(3,.5), random.order = FALSE, title.size = 1.5)
library(wordcloud)
library(wordcloud)
emos = levels(factor(sent_df$emotion))
nemo = length(emos)
emo.docs = rep("", nemo)
for (i in 1:nemo)
{
tmp = some_txt[emotion == emos[i]]
emo.docs[i] = paste(tmp, collapse=" ")
}
# remove stopwords
emo.docs = removeWords(emo.docs, stopwords("english"))
# create corpus
corpus = Corpus(VectorSource(emo.docs))
tdm = TermDocumentMatrix(corpus)
tdm = as.matrix(tdm)
colnames(tdm) = emos
# comparison word cloud
comparison.cloud(tdm, colors = brewer.pal(nemo, "Dark2"),
scale = c(3,.5), random.order = FALSE, title.size = 1.5)
View(tdm)
emo.docs = removeWords(emo.docs, stopwords("english"))
emos = levels(factor(sent_df$emotion))
nemo = length(emos)
emo.docs = rep("", nemo)
for (i in 1:nemo)
{
tmp = some_txt[emotion == emos[i]]
emo.docs[i] = paste(tmp, collapse=" ")
}
emos = levels(factor(sent_df$emotion))
nemo = length(emos)
emo.docs = rep("", nemo)
for (i in 1:nemo)
{
tmp = df[emotion == emos[i]]
emo.docs[i] = paste(tmp, collapse=" ")
}
emos = levels(factor(sent_df$emotion))
nemo = length(emos)
emo.docs = rep("", nemo)
for (i in 1:nemo)
{
tmp = sent_df[emotion == emos[i]]
emo.docs[i] = paste(tmp, collapse=" ")
}
emos = levels(factor(sent_df$emotion))
nemo = length(emos)
emo.docs = rep("", nemo)
for (i in 1:nemo)
{
tmp = df[emotion == emos[i]]
emo.docs[i] = paste(tmp, collapse=" ")
}
emos = levels(factor(sent_df$emotion))
nemo = length(emos)
emo.docs = rep("", nemo)
for (i in 1:nemo)
{
tmp = df$review[emotion == emos[i]]
emo.docs[i] = paste(tmp, collapse=" ")
}
emos = levels(factor(sent_df$emotion))
nemo = length(emos)
emo.docs = rep("", nemo)
for (i in 1:nemo)
{
tmp = df$review[emotion == emos[i]]
emo.docs[i] = paste(tmp, collapse=" ")
}
# remove stopwords
emo.docs = removeWords(emo.docs, stopwords("english"))
# create corpus
corpus = Corpus(VectorSource(emo.docs))
tdm = TermDocumentMatrix(corpus)
tdm = as.matrix(tdm)
colnames(tdm) = emos
# comparison word cloud
comparison.cloud(tdm, colors = brewer.pal(nemo, "Dark2"),
scale = c(3,.5), random.order = FALSE, title.size = 1.5)
emos = levels(factor(sent_df$emotion))
nemo = length(emos)
emo.docs = rep("", nemo)
for (i in 1:nemo)
{
tmp = df$review[emotion == emos[i]]
emo.docs[i] = paste(tmp, collapse=" ")
}
emos = levels(factor(sent_df$emotion))
nemo = length(emos)
emo.docs = rep("", nemo)
for (i in 1:nemo)
{
tmp = sent_df$review[emotion == emos[i]]
emo.docs[i] = paste(tmp, collapse=" ")
}
# remove stopwords
emo.docs = removeWords(emo.docs, stopwords("english"))
# create corpus
corpus = Corpus(VectorSource(emo.docs))
tdm = TermDocumentMatrix(corpus)
tdm = as.matrix(tdm)
colnames(tdm) = emos
# comparison word cloud
comparison.cloud(tdm, colors = brewer.pal(nemo, "Dark2"),
scale = c(3,.5), random.order = FALSE, title.size = 1.5)
emos = levels(factor(sent_df$emotion))
nemo = length(emos)
emo.docs = rep("", nemo)
for (i in 1:nemo)
{
tmp = df$review[emotion == emos[i]]
emo.docs[i] = paste(tmp, collapse=" ")
}
# remove stopwords
emo.docs = removeWords(emo.docs, stopwords("english"))
# create corpus
corpus = Corpus(VectorSource(emo.docs))
tdm = TermDocumentMatrix(corpus)
tdm = as.matrix(tdm)
colnames(tdm) = emos
# comparison word cloud
comparison.cloud(tdm, colors = brewer.pal(nemo, "Dark2"),
scale = c(3,.5), random.order = FALSE, title.size = 1.5)
try.error = function(x)
{
# create missing value
y = NA
# tryCatch error
try_error = tryCatch(tolower(x), error=function(e) e)
# if not an error
if (!inherits(try_error, "error"))
y = tolower(x)
# result
return(y)
}
library(ggplot2)
library(xlsx)
library(sentiment)
library(wordcloud)
setwd("D:/Google Drive/Coursera/capstone_yelt")
RndStr <- function(n = 1, lenght = 12)
{
randomString <- c(1:n) # initialize vector
for (i in 1:n)
{
randomString[i] <- paste(sample(c(0:9, letters, LETTERS),
lenght, replace = TRUE),
collapse = "")
}
return(randomString)
}
library(RODBC)
conn <- odbcConnect(dsn = "capstone", uid = "hdfs", pwd = "")
sqlQuery(conn, "ADD JAR /CML/lib/lib/hive-serdes-1.0-SNAPSHOT.jar;")
sqlQuery(conn, "set mapred.job.priority='VERY_HIGH';")
df <-
sqlQuery(
conn, "select a.user_id, a.date ,
regexp_replace(a.`text`, '\\\n|\\\r','') as review,
regexp_replace(b.`text`, '\\\n|\\\r','') as tips
from review a left join tip b on (a.business_id=b.business_id) and (a.date=b.date) and (a.user_id=b.user_id)
where a.business_id = '4bEjOyTaDG24SY5TxsaUNQ' limit 10")
odbcClose(conn)
head(df)
setwd("D:/Google Drive/Coursera/capstone_yelt")
setwd("D:/Google Drive/Coursera/capstone_yelt")
setwd("D:/Google Drive/Coursera/capstone_yelt")
setwd("D:/Google Drive/Coursera/capstone_yelt")
---
