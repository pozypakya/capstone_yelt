}
nametree(x, "", 0L)
}
out<-flatten(json_data)
library(reshape2)
out<-melt(json_data)
View(out)
library(RJSONIO)
json_data <- fromJSON("c:/business.json", flatten = FALSE)
View(out)
View(jj)
jj <- data.frame(t(sapply(json_data,c)))
View(jj)
jj <- as.data.frame(json_data)
library(RJSONIO)
json_data <- fromJSON("c:/business.json", flatten = TRUE)
jj <- data.frame(t(sapply(json_data,c)))
View(jj)
names(json_data)
jj <- as.data.frame(View(head(json_data)))
View(jj)
jj <- as.data.frame(View(head(json_data)))
as.data.frame(t(sapply( txtJson$result$data, unlist )) )
as.data.frame(t(sapply(json_data, unlist )) )
c <- as.data.frame(t(sapply(json_data, unlist )) )
View(c)
install.packages("RHive")
install.packages("ROdbc)
)
)
)
)
sdwd
install.packages("ROdbc")
install.packages("RODBC")
library("RODBC")
library(RODBC)
conn < - odbcConnect(dsn="ACCPAC 54 SQL", uid="my_ID", pwd="my_PWD")
#sqlTables(channel)
queryResult <- sqlQuery(conn, "SELECT * FROM TableName")
odbcClose(conn)
dim(queryResult)
library(RODBC)
conn < - odbcConnect(dsn="yelt", uid="", pwd="")
#sqlTables(channel)
queryResult <- sqlQuery(conn, "SELECT * FROM coursera.business")
odbcClose(conn)
dim(queryResult)
conn < - odbcConnect(dsn="yelt", uid="", pwd="")
conn <- odbcConnect(dsn="yelt", uid="", pwd="")
library(RODBC)
conn <- odbcConnect(dsn="yelt", uid="", pwd="")
#sqlTables(channel)
queryResult <- sqlQuery(conn, "SELECT * FROM coursera.business")
odbcClose(conn)
dim(queryResult)
library(RODBC)
conn < - odbcConnect(dsn="yelt", uid="", pwd="")
#sqlTables(channel)
queryResult <- sqlQuery(conn, "SELECT * FROM coursera.business")
odbcClose(conn)
dim(queryResult)
queryResult <- sqlQuery(conn, "SELECT * FROM coursera.business")
conn < - odbcConnect(dsn="yelt", uid="", pwd="")
conn < - odbcConnect(dsn="yelt", uid="", pwd="")
conn
queryResult <- sqlQuery(conn, "SELECT * FROM coursera.business")
sqlQuery(conn, "SELECT * FROM coursera.business")
library(readxl)
a <- read_excel("c:/business.xls")
View(a)
library(jsonlite)
a$attributes
library(RJSONIO)
fromJSON(a$attributes)
g <- fromJSON(a$attributes)
a$attributes
jj <- unlist(a$attributes)
jj
g <- fromJSON(a$attributes)
g <- fromJSON(is.na(a$attributes))
g <- fromJSON(a$attributes)
g <- fromJSON(a$attributes)
library(rjson)
g <- fromJSON(a$attributes)
g <- fromJSON(a$attributes,C)
g <- fromJSON(a$attributes)
lapply(a$attributes,'[[',name='message')
lapply(a$attributes,'[[',name='message')
lapply(a$attributes,'[[',name='attributes')
fmNames<-sapply(a$attributes, function(x) x[[14]])
fmNames<-sapply(a$attributes, function(x) x[[]])
fmNames<-sapply(a$attributes, function(x) x[[1]])
fmNames
View(fmNames)
fmNames<-sapply(a$attributes, function(x) x[[2]])
fmNames<-sapply(a$attributes, function(x) x[{1}])
fmNames
fmNames<-sapply(a$hours, function(x) x[{1}])
fmnames
fmNames
json_data <- fromJSON(paste(readLines(a$hours), collapse=""))
json_data <- fromJSON(paste(a$hours, collapse=""))
library(RJSONIO)
json_data <- fromJSON(a$hours, flatten = TRUE)
library("rjson")
json_data <- fromJSON(a$hours, flatten = TRUE)
json_data <- fromJSON(a$hours)
a$hours
raw_data      <- gsub('\\"', '', a$hours)
raw_data
raw_data      <- gsub('\\"{', '', a$hours)
raw_data <- gsub("\\]\\]", "\\]", a$hours)
raw_data
raw_data <- paste0(raw_data, "}")
raw_data
raw_data
View(raw_data)
Head(raw_data)
head(raw_data)
View(head(raw_data))
library(rjson)
dat <- fromJSON(a$hours)
dat <- fromJSON(a$attributes)
dat <- fromJSON(a$attributes,C)
dat <- fromJSON(a$attributes)
library(readxl)
a <- read_excel("c:/business.xls")
a$business_id
a$attributes
library(readxl)
a <- read_excel("c:/business.xls")
raw_data <- gsub("\\]\\]", "\\]", a$attributes)
library(readxl)
a <- read_excel("c:/business.xls")
raw_data <- gsub("\\]\\]", "\\]", a$attributes)
raw_data <- paste0(raw_data, "}")
raw_data
library(jsonlite)
rbind.pages(fromJSON(a$attributes))
rbind.pages(fromJSON(a$hours))
rbind.pages(fromJSON(a$hours))
remove.packages("rJava")
remove.packages("RImpala")
require(devtools)
install_version("rJava", version = "0.5-1", repos = "http://cran.us.r-project.org")
library(rJava)
install.packages(rJava)
"rJava"
install.packages("rJava")
library(rJava)
install_version("RImpala", version = "0.1.3", repos = "http://cran.us.r-project.org")
install_version("RImpala", version = "0.1.3", repos = "http://cran.us.r-project.org")
install_version("RImpala", version = "0.1.3", repos = "http://cran.us.r-project.org")
library(RImpala)
install.packages("RImpala")
library(RImpala)
rimpala.init(libs="C:/Users/R10154/Google Drive/lib/impala/new")
rimpala.connect(IP="10.54.1.151",port="21050",principal="noSasl")
rimpala.usedatabase("nova")
rimpala.query("Select * from nova_trouble_ticket limit 10")
rJava::head()
rJava::rev()
rJava::rev
library(RImpala)
rimpala.init(libs="C:/Users/R10154/Google Drive/lib/impala/new")
rimpala.connect(IP="10.54.1.151",port="21050",principal="noSasl")
rimpala.usedatabase("nova")
rimpala.query("Select * from nova_trouble_ticket limit 10")
library(RImpala)
rimpala.init(libs="C:/Users/R10154/Google Drive/lib/impala/new")
rimpala.connect(IP="10.54.1.151",port="21050",principal="noSasl")
library(RImpala)
rimpala.init(libs="C:/Users/R10154/Google Drive/lib/impala/new")
rimpala.connect(IP="10.54.1.151",port="21050",principal="noSasl")
rimpala.usedatabase("nova")
rimpala.query("Select * from nova_trouble_ticket limit 10")
remove.packages("rJava")
remove.packages("RImpala")
library(rJava)
install.packages(rJava)
install.packages("RJava")
install.packages("rJava")
install.packages("rJava")
install.packages("RJDBC")
install.packages(c("RJDBC", "devtools", "dplyr")
)
devtools::install_github("jwills/dplyrimpaladb")
devtools::install_github("jwills/dplyrimpaladb")
devtools::install_github("jwills/dplyrimpaladb")
devtools::install_github("jwills/dplyrimpaladb")
remove.packages("rJava")
remove.packages("RImpala")
install.packages(c("RJDBC", "devtools", "dplyr"))
install.packages(c("RJDBC", "devtools", "dplyr"))
install.packages(c("RJDBC", "devtools", "dplyr"))
devtools::install_github("jwills/dplyrimpaladb")
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jdk1.7.0_79') # for 64-bit version
library(rJava)
devtools::install_github("jwills/dplyrimpaladb")
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jdk1.7.0_79/jre') # for 64-bit version
devtools::install_github("jwills/dplyrimpaladb")
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre7') # for 64-bit version
devtools::install_github("jwills/dplyrimpaladb")
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre7') # for 64-bit version
devtools::install_github("jwills/dplyrimpaladb")
remove.packages("rJava")
remove.packages("RImpala")
require(devtools)
install_version("RImpala", version = "0.1.3", repos = "http://cran.us.r-project.org")
library(RImpala)
rimpala.init(libs="C:/Users/R10154/Google Drive/lib/impala/new")
rimpala.connect(IP="10.54.1.151",port="21050",principal="noSasl")
rimpala.usedatabase("nova")
rimpala.query("Select * from nova_trouble_ticket limit 10")
RImpala::rimpala.close()
library(RImpala)
rimpala.init(libs="C:/Users/R10154/Google Drive/lib/impala/new")
rimpala.connect(IP="10.54.1.151",port="21050",principal="noSasl")
rimpala.usedatabase("nova")
rimpala.query("Select * from nova_trouble_ticket")
devtools::install_github("jwills/dplyrimpaladb")
library(dplyrimpaladb)
options(dplyr.jdbc.classpath = "C:/Users/R10154/Google Drive/lib/impala/new")
gdelt <- src_impaladb(dbname='nova', host='10.54.1.151')
gdelt
gdelt <- src_impaladb(dbname='nova', host='10.54.1.151')
gdelt
gdelt <- src_impaladb(dbname='nova', host='10.54.1.151')
install.packages("lazy")
gdelt <- src_impaladb(dbname='nova', host='10.54.1.151')
View(gdelt)
gdelt
events <- tbl(gdelt, 'nova_trouble_ticket')
events
events <- tbl_sql("select * from nova_trouble_ticket limit 10")
events <- tbl_sql(gdelt,"select * from nova_trouble_ticket limit 10")
events <- tbl_sql(gdelt,"select * from nova_trouble_ticket limit 10")
events <-  tbl(gdelt, sql("SELECT * FROM nova_trouble_ticket limit 100"))
events
a <- as.data.frame(events)
View(a)
install.packages("caret")
conn <- src_impaladb(dbname='nova', host='10.54.1.151')
rst <-  tbl(conn, sql("select zone from nova.nova_trouble_ticket where zone <> 'null' group by zone order by zone"))
as.data.frame(rst)
rst <-  tbl(conn, sql("select * from nova_trouble_ticket where zone <> 'null' limit 1"))
typeof(rst)
typeof(as.data.frame(rst))
summary(as.data.frame(rst))
str(as.data.frame(rst))
strtable
devtools::source_gist('4a0a5ab9fe7e1cf3be0e'
)
strtable
print(strtable(iris), na.print='')
print(strtable(as.data.frame(rst)), na.print='')
print(strtable(as.data.frame(rst)))
print(strtable(as.data.frame(rst),"example"))
print(strtable(as.data.frame(rst),"variable"))
library(rpart)
data(kyphosis)
class(kyphosis)
apply(kyphosis,2,class)
apply(as.data.frame(rst),2,class)
library("corrplot")
library("lazy")
library("dplyrimpaladb")
library("caret")
library("rpart")
library("rpart")conn <- src_impaladb(dbname='nova', host='10.54.1.151')
conn <- src_impaladb(dbname='nova', host='10.54.1.151')
options(dplyr.jdbc.classpath = "C:/Users/R10154/Google Drive/lib/impala/new")
conn <- src_impaladb(dbname='nova', host='10.54.1.151')
result <-  tbl(conn, sql("select zone from nova.nova_trouble_ticket where zone <> 'null' group by zone order by zone"))
as.data.frame(result)
result <-  tbl(conn, sql("select zone from nova.nova_trouble_ticket where zone <> 'null' group by zone order by zone"))
as.data.frame(result)
Below is the components required :-
result <-  tbl(conn, sql("select * from nova_trouble_ticket a join active_code b on (trim(a.cause_code) = trim(b.cause_code)) join exchange_zone c ON (trim(a.exchange)=trim(c.building_id))  and (b.code <> 'PASSIVE' )
where  c.zone_name like '%ZONE KEPONG%' and a.status like '%Closed%'  and length(a.cause_category) > 1  and length(a.created_date) > 6 and length(a.closed_date) > 6 and length(a.installed_date) > 6
and a.package_name not like '%null%' and a.product not like '%null%' and a.sub_product not like '%null%'  and  length(a.description) > 10
and network_tt_id = 'null'
order by rand() limit 10000"))
names(result)
result <-  tbl(conn, sql("select * from nova_trouble_ticket a join active_code b on (trim(a.cause_code) = trim(b.cause_code)) join exchange_zone c ON (trim(a.exchange)=trim(c.building_id))  and (b.code <> 'PASSIVE' )
where  c.zone_name like '%ZONE KEPONG%' and a.status like '%Closed%'  and length(a.cause_category) > 1  and length(a.created_date) > 6 and length(a.closed_date) > 6 and length(a.installed_date) > 6
and a.package_name not like '%null%' and a.product not like '%null%' and a.sub_product not like '%null%'  and  length(a.description) > 10
and network_tt_id = 'null'
order by rand() limit 10000"))
conn <- src_impaladb(dbname='nova', host='10.54.1.151')
rst <-  tbl(conn, sql("SELECT * FROM nova_trouble_ticket limit 100"))
df1 <- as.data.frame(rst)
View(df1)
library("caret")
library("RJDBC")
library("dplyr")
library("caret")
library("corrplot")
library("lazy")
library("dplyrimpaladb")
library("rpart")
options(dplyr.jdbc.classpath = "C:\\Users\\R10154\\Google Drive\\lib\\impala")
conn <- src_impaladb(dbname='nova', host='10.54.1.151')
options(dplyr.jdbc.classpath = "C:\\Users\\R10154\\Google Drive\\lib\\impala")
conn <- src_impaladb(dbname='nova', host='10.54.1.151')
c(list.files("C:/Users/R10154/Google Drive/lib/impala/",pattern="jar$",full.names=T)
)
c(list.files("C:/Users/R10154/Google Drive/lib/impala/",pattern="jar$",full.names=T))
a <- read.csv("d:/streamyx.csv",header = TRUE, dec=".")
setwd("C:/Users/R10154/Google Drive/Coursera/capstone_yelt")
a <- read.csv("f.csv")
df_review <- as.data.frame(tolower(a$review))
View(df_review)
df_review <-as.data.frame(sapply(df_review,gsub,pattern="[[:digit:]]",replacement=""))
df_review <-as.data.frame(sapply(df_review,gsub,pattern="[[:punct:]]",replacement=""))
df_review <-as.data.frame(sapply(df_review,gsub,pattern="@\\w+",replacement=""))
df_review <-as.data.frame(sapply(df_review,gsub,pattern="^\\s+|\\s+$",replacement=""))
df_review <-as.data.frame(sapply(df_review,gsub,pattern="[ \t]{2,}",replacement=""))
names(df_review) = "review"
View(df_review)
mach_corpus = Corpus(VectorSource(df_review))
suppressWarnings(suppressMessages(library(ggplot2)))
suppressWarnings(suppressMessages(library(xlsx)))
suppressWarnings(suppressMessages(library(sentiment)))
suppressWarnings(suppressMessages(library(wordcloud)))
suppressWarnings(suppressMessages(library(RODBC)))
suppressWarnings(suppressMessages(library(pander)))
suppressWarnings(suppressMessages(library(ggmap)))
suppressWarnings(suppressMessages(library(RColorBrewer)))
suppressWarnings(suppressMessages(library(Rstem)))
suppressWarnings(suppressMessages(library(tm)))
suppressWarnings(suppressMessages(library(NLP)))
suppressWarnings(suppressMessages(library(rmarkdown)))
suppressWarnings(suppressMessages(library(gridExtra)))
suppressWarnings(suppressMessages(library(Rmisc)))
suppressWarnings(suppressMessages(library(png)))
suppressWarnings(suppressMessages(library(grid)))
mach_corpus = Corpus(VectorSource(df_review))
tdm = TermDocumentMatrix(mach_corpus,
control = list(removePunctuation = TRUE,
stopwords = c("machine", "learning", stopwords("english")),
removeNumbers = TRUE, tolower = TRUE))
# define tdm as matrix
m = as.matrix(tdm)
# get word counts in decreasing order
word_freqs = sort(rowSums(m), decreasing=TRUE)
# create a data frame with words and their frequencies
dm = data.frame(word=names(word_freqs), freq=word_freqs)
View(dm)
# plot wordcloud
wordcloud(dm$word, dm$freq, random.order=FALSE, colors=brewer.pal(8, "Dark2"))
# plot wordcloud
wordcloud(dm$word, dm$freq, random.order=FALSE, colors=brewer.pal(8, "Dark2"))
# plot wordcloud
wordcloud(dm$word, dm$freq, random.order=FALSE, colors=brewer.pal(8, "Dark2"))
# plot wordcloud
wordcloud(dm$word, dm$freq, random.order=FALSE, colors=brewer.pal(8, "Dark2"))
wordcloud(dm$word, dm$freq, random.order=FALSE, colors=brewer.pal(8, "Dark2"))
wordcloud(dm$word, head(dm$freq), random.order=FALSE, colors=brewer.pal(8, "Dark2"))
wordcloud(head(dm$word), head(dm$freq), random.order=FALSE, colors=brewer.pal(8, "Dark2"))
wordcloud(dm$word[,5], dm$freq[,5], random.order=FALSE, colors=brewer.pal(8, "Dark2"))
wordcloud(dm$word[5,], dm$freq[5,], random.order=FALSE, colors=brewer.pal(8, "Dark2"))
wordcloud(dm$word[5], dm$freq[5], random.order=FALSE, colors=brewer.pal(8, "Dark2"))
wordcloud(dm$word[1:10], dm$freq[1:10], random.order=FALSE, colors=brewer.pal(8, "Dark2"))
wordcloud(dm$word[1:100], dm$freq[1:100], random.order=FALSE, colors=brewer.pal(8, "Dark2"))
df_review <- read.csv("f.csv")
df_review <- read.csv("f.csv")
df_review <-as.data.frame(sapply(df_review,gsub,pattern="[[:digit:]]",replacement=""))
df_review <-as.data.frame(sapply(df_review,gsub,pattern="[[:punct:]]",replacement=""))
df_review <-as.data.frame(sapply(df_review,gsub,pattern="@\\w+",replacement=""))
df_review <-as.data.frame(sapply(df_review,gsub,pattern="^\\s+|\\s+$",replacement=""))
df_review <-as.data.frame(sapply(df_review,gsub,pattern="[ \t]{2,}",replacement=""))
names(df_review) = "review"
df_review <-as.data.frame(sapply(df_review,gsub,pattern="[[:digit:]]",replacement=""))
View(df_review)
df_review <- read.csv("f.csv")
df_review <- read.csv("f.csv")
df_review <- df_review$review
df_review <-as.data.frame(sapply(df_review,gsub,pattern="[[:digit:]]",replacement=""))
df_review <-as.data.frame(sapply(df_review,gsub,pattern="[[:punct:]]",replacement=""))
df_review <-as.data.frame(sapply(df_review,gsub,pattern="@\\w+",replacement=""))
df_review <-as.data.frame(sapply(df_review,gsub,pattern="^\\s+|\\s+$",replacement=""))
df_review <-as.data.frame(sapply(df_review,gsub,pattern="[ \t]{2,}",replacement=""))
names(df_review) = "review"
View(df_review)
suppressWarnings(suppressMessages(library(ggplot2)))
suppressWarnings(suppressMessages(library(xlsx)))
suppressWarnings(suppressMessages(library(sentiment)))
suppressWarnings(suppressMessages(library(wordcloud)))
suppressWarnings(suppressMessages(library(RODBC)))
suppressWarnings(suppressMessages(library(pander)))
suppressWarnings(suppressMessages(library(ggmap)))
suppressWarnings(suppressMessages(library(RColorBrewer)))
suppressWarnings(suppressMessages(library(Rstem)))
suppressWarnings(suppressMessages(library(tm)))
suppressWarnings(suppressMessages(library(NLP)))
suppressWarnings(suppressMessages(library(rmarkdown)))
suppressWarnings(suppressMessages(library(gridExtra)))
suppressWarnings(suppressMessages(library(Rmisc)))
suppressWarnings(suppressMessages(library(png)))
suppressWarnings(suppressMessages(library(grid)))
mach_corpus = Corpus(VectorSource(df_review))
# create document term matrix applying some transformations
tdm = TermDocumentMatrix(mach_corpus,
control = list(removePunctuation = TRUE,
stopwords = c("machine", "learning", stopwords("english")),
removeNumbers = TRUE, tolower = TRUE))
# define tdm as matrix
m = as.matrix(tdm)
# get word counts in decreasing order
word_freqs = sort(rowSums(m), decreasing=TRUE)
# create a data frame with words and their frequencies
dm = data.frame(word=names(word_freqs), freq=word_freqs)
View(dm)
wordcloud(dm$word[1:100], dm$freq[1:100], random.order=FALSE, colors=brewer.pal(8, "Dark2"))
wordcloud(dm$word[1:1000], dm$freq[1:1000], random.order=FALSE, colors=brewer.pal(8, "Dark2"))
wordcloud(dm$word[1:500], dm$freq[1:500], random.order=FALSE, colors=brewer.pal(8, "Dark2"))
View(dm)
install.packages()
install.packages("igraph")
install.packages("igraph")
install.packages("RPMG")
df_review <- read.csv("f.csv")
df_review <- df_review$review
df_review <-as.data.frame(sapply(df_review,gsub,pattern="[[:digit:]]",replacement=""))
df_review <-as.data.frame(sapply(df_review,gsub,pattern="[[:punct:]]",replacement=""))
df_review <-as.data.frame(sapply(df_review,gsub,pattern="@\\w+",replacement=""))
df_review <-as.data.frame(sapply(df_review,gsub,pattern="^\\s+|\\s+$",replacement=""))
df_review <-as.data.frame(sapply(df_review,gsub,pattern="[ \t]{2,}",replacement=""))
names(df_review) = "review"
View(df_review)
sapply(gregexpr("\\W+", df_review), length) + 1
length(df_review)
gregexpr("\\W+", df_review)
vapply(strsplit(str1, "\\W+"), length, integer(1))
vapply(strsplit(df_review, "\\W+"), length, integer(1))
vapply(strsplit(df_review, "\\W+"), length)
mach_corpus = Corpus(VectorSource(df_review))
# create document term matrix applying some transformations
tdm = TermDocumentMatrix(mach_corpus,
control = list(removePunctuation = TRUE,
stopwords = c("machine", "learning", stopwords("english")),
removeNumbers = TRUE, tolower = TRUE))
# define tdm as matrix
m = as.matrix(tdm)
m
tdm
tdm$i
tdm$v
tdm$nrow
tdm$ncol
tdm$dimnames
tdm$dimnames$Terms
tdm$dimnames$Docs
word_freqs = sort(rowSums(m), decreasing=TRUE)
word_freqs
word_freqs
View(word_freqs)
dm = data.frame(word=names(word_freqs), freq=word_freqs)
View(dm)
suppressWarnings(suppressMessages(wordcloud(dm$word[1:500], dm$freq[1:500], random.order=FALSE, colors=brewer.pal(8, "Dark2"))))
chars_per_tweet = sapply(df_review, nchar)
chars_per_tweet = sapply(df_review$review, nchar)
chars_per_tweet = sapply(as.vector(df_review$review), nchar)
chars_per_tweet
chars_per_tweet[0]
View(chars_per_tweet)
View(as.data.frame(chars_per_tweet)
)
summary(chars_per_tweet)
words_list = strsplit(df_review$review, " ")
df_review <- read.csv("g.csv",header = TRUE)
df_review <- as.data.frame(tolower(df_review$review))
names(df_review) = "review"
df_review <-as.data.frame(sapply(df_review,gsub,pattern="[[:digit:]]",replacement=""))
df_review <-as.data.frame(sapply(df_review,gsub,pattern="[[:punct:]]",replacement=""))
df_review <-as.data.frame(sapply(df_review,gsub,pattern="@\\w+",replacement=""))
df_review <-as.data.frame(sapply(df_review,gsub,pattern="^\\s+|\\s+$",replacement=""))
df_review <-as.data.frame(sapply(df_review,gsub,pattern="[ \t]{2,}",replacement=""))
#df_review <- as.data.frame(df_review$review[1:10])
names(df_review) = "review"
words_list = strsplit(df_review$review, " ")
words_list = strsplit(df_review$review, "\\ ")
words_list = strsplit(as.character(df_review$review), "\\ ")
summary(wwords_list)
summary(words_list)
df_review <-as.data.frame(sapply(df_review,gsub,pattern="\\:",replacement=""))
df_review <-as.data.frame(sapply(df_review,gsub,pattern="\\:",replacement=""))
View(df_review)
df_review <- read.csv("g.csv",header = TRUE)
df_review <- as.data.frame(tolower(df_review$review))
names(df_review) = "review"
df_review <-as.data.frame(sapply(df_review,gsub,pattern="[[:digit:]]",replacement=""))
df_review <-as.data.frame(sapply(df_review,gsub,pattern="[[:punct:]]",replacement=""))
df_review <-as.data.frame(sapply(df_review,gsub,pattern="@\\w+",replacement=""))
df_review <-as.data.frame(sapply(df_review,gsub,pattern="^\\s+|\\s+$",replacement=""))
df_review <-as.data.frame(sapply(df_review,gsub,pattern="[ \t]{2,}",replacement=""))
df_review <-as.data.frame(sapply(df_review,gsub,pattern="\\:",replacement=""))
#df_review <- as.data.frame(df_review$review[1:10])
names(df_review) = "review"
View(df_review)
df_review <- read.csv("g.csv",header = TRUE)
df_review <- as.data.frame(tolower(df_review$review))
names(df_review) = "review"
df_review <-as.data.frame(sapply(df_review,gsub,pattern="[[:digit:]]",replacement=""))
df_review <-as.data.frame(sapply(df_review,gsub,pattern="[[:punct:]]",replacement=""))
df_review <-as.data.frame(sapply(df_review,gsub,pattern="@\\w+",replacement=""))
df_review <-as.data.frame(sapply(df_review,gsub,pattern="^\\s+|\\s+$",replacement=""))
View(df_review)
df_review <- read.csv("g.csv")
View(df_review)
