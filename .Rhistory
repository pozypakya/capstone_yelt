library(readxl)
a <- read_excel("c:/business.xls")
View(a)
library(jsonlite)
a$attributes
library(RJSONIO)
fromJSON(a$attributes)
g <- fromJSON(a$attributes)
a$attributes
jj <- unlist(a$attributes)
jj
g <- fromJSON(a$attributes)
g <- fromJSON(is.na(a$attributes))
g <- fromJSON(a$attributes)
g <- fromJSON(a$attributes)
library(rjson)
g <- fromJSON(a$attributes)
g <- fromJSON(a$attributes,C)
g <- fromJSON(a$attributes)
lapply(a$attributes,'[[',name='message')
lapply(a$attributes,'[[',name='message')
lapply(a$attributes,'[[',name='attributes')
fmNames<-sapply(a$attributes, function(x) x[[14]])
fmNames<-sapply(a$attributes, function(x) x[[]])
fmNames<-sapply(a$attributes, function(x) x[[1]])
fmNames
View(fmNames)
fmNames<-sapply(a$attributes, function(x) x[[2]])
fmNames<-sapply(a$attributes, function(x) x[{1}])
fmNames
fmNames<-sapply(a$hours, function(x) x[{1}])
fmnames
fmNames
json_data <- fromJSON(paste(readLines(a$hours), collapse=""))
json_data <- fromJSON(paste(a$hours, collapse=""))
library(RJSONIO)
json_data <- fromJSON(a$hours, flatten = TRUE)
library("rjson")
json_data <- fromJSON(a$hours, flatten = TRUE)
json_data <- fromJSON(a$hours)
a$hours
raw_data      <- gsub('\\"', '', a$hours)
raw_data
raw_data      <- gsub('\\"{', '', a$hours)
raw_data <- gsub("\\]\\]", "\\]", a$hours)
raw_data
raw_data <- paste0(raw_data, "}")
raw_data
raw_data
View(raw_data)
Head(raw_data)
head(raw_data)
View(head(raw_data))
library(rjson)
dat <- fromJSON(a$hours)
dat <- fromJSON(a$attributes)
dat <- fromJSON(a$attributes,C)
dat <- fromJSON(a$attributes)
library(readxl)
a <- read_excel("c:/business.xls")
a$business_id
a$attributes
library(readxl)
a <- read_excel("c:/business.xls")
raw_data <- gsub("\\]\\]", "\\]", a$attributes)
library(readxl)
a <- read_excel("c:/business.xls")
raw_data <- gsub("\\]\\]", "\\]", a$attributes)
raw_data <- paste0(raw_data, "}")
raw_data
library(jsonlite)
rbind.pages(fromJSON(a$attributes))
rbind.pages(fromJSON(a$hours))
rbind.pages(fromJSON(a$hours))
remove.packages("rJava")
remove.packages("RImpala")
require(devtools)
install_version("rJava", version = "0.5-1", repos = "http://cran.us.r-project.org")
library(rJava)
install.packages(rJava)
"rJava"
install.packages("rJava")
library(rJava)
install_version("RImpala", version = "0.1.3", repos = "http://cran.us.r-project.org")
install_version("RImpala", version = "0.1.3", repos = "http://cran.us.r-project.org")
install_version("RImpala", version = "0.1.3", repos = "http://cran.us.r-project.org")
library(RImpala)
install.packages("RImpala")
library(RImpala)
rimpala.init(libs="C:/Users/R10154/Google Drive/lib/impala/new")
rimpala.connect(IP="10.54.1.151",port="21050",principal="noSasl")
rimpala.usedatabase("nova")
rimpala.query("Select * from nova_trouble_ticket limit 10")
rJava::head()
rJava::rev()
rJava::rev
library(RImpala)
rimpala.init(libs="C:/Users/R10154/Google Drive/lib/impala/new")
rimpala.connect(IP="10.54.1.151",port="21050",principal="noSasl")
rimpala.usedatabase("nova")
rimpala.query("Select * from nova_trouble_ticket limit 10")
library(RImpala)
rimpala.init(libs="C:/Users/R10154/Google Drive/lib/impala/new")
rimpala.connect(IP="10.54.1.151",port="21050",principal="noSasl")
library(RImpala)
rimpala.init(libs="C:/Users/R10154/Google Drive/lib/impala/new")
rimpala.connect(IP="10.54.1.151",port="21050",principal="noSasl")
rimpala.usedatabase("nova")
rimpala.query("Select * from nova_trouble_ticket limit 10")
remove.packages("rJava")
remove.packages("RImpala")
library(rJava)
install.packages(rJava)
install.packages("RJava")
install.packages("rJava")
install.packages("rJava")
install.packages("RJDBC")
install.packages(c("RJDBC", "devtools", "dplyr")
)
devtools::install_github("jwills/dplyrimpaladb")
devtools::install_github("jwills/dplyrimpaladb")
devtools::install_github("jwills/dplyrimpaladb")
devtools::install_github("jwills/dplyrimpaladb")
remove.packages("rJava")
remove.packages("RImpala")
install.packages(c("RJDBC", "devtools", "dplyr"))
install.packages(c("RJDBC", "devtools", "dplyr"))
install.packages(c("RJDBC", "devtools", "dplyr"))
devtools::install_github("jwills/dplyrimpaladb")
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jdk1.7.0_79') # for 64-bit version
library(rJava)
devtools::install_github("jwills/dplyrimpaladb")
Sys.setenv(JAVA_HOME='C:/Program Files/Java/jdk1.7.0_79/jre') # for 64-bit version
devtools::install_github("jwills/dplyrimpaladb")
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre7') # for 64-bit version
devtools::install_github("jwills/dplyrimpaladb")
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre7') # for 64-bit version
devtools::install_github("jwills/dplyrimpaladb")
remove.packages("rJava")
remove.packages("RImpala")
require(devtools)
install_version("RImpala", version = "0.1.3", repos = "http://cran.us.r-project.org")
library(RImpala)
rimpala.init(libs="C:/Users/R10154/Google Drive/lib/impala/new")
rimpala.connect(IP="10.54.1.151",port="21050",principal="noSasl")
rimpala.usedatabase("nova")
rimpala.query("Select * from nova_trouble_ticket limit 10")
RImpala::rimpala.close()
library(RImpala)
rimpala.init(libs="C:/Users/R10154/Google Drive/lib/impala/new")
rimpala.connect(IP="10.54.1.151",port="21050",principal="noSasl")
rimpala.usedatabase("nova")
rimpala.query("Select * from nova_trouble_ticket")
devtools::install_github("jwills/dplyrimpaladb")
library(dplyrimpaladb)
options(dplyr.jdbc.classpath = "C:/Users/R10154/Google Drive/lib/impala/new")
gdelt <- src_impaladb(dbname='nova', host='10.54.1.151')
gdelt
gdelt <- src_impaladb(dbname='nova', host='10.54.1.151')
gdelt
gdelt <- src_impaladb(dbname='nova', host='10.54.1.151')
install.packages("lazy")
gdelt <- src_impaladb(dbname='nova', host='10.54.1.151')
View(gdelt)
gdelt
events <- tbl(gdelt, 'nova_trouble_ticket')
events
events <- tbl_sql("select * from nova_trouble_ticket limit 10")
events <- tbl_sql(gdelt,"select * from nova_trouble_ticket limit 10")
events <- tbl_sql(gdelt,"select * from nova_trouble_ticket limit 10")
events <-  tbl(gdelt, sql("SELECT * FROM nova_trouble_ticket limit 100"))
events
a <- as.data.frame(events)
View(a)
install.packages("caret")
conn <- src_impaladb(dbname='nova', host='10.54.1.151')
rst <-  tbl(conn, sql("select zone from nova.nova_trouble_ticket where zone <> 'null' group by zone order by zone"))
as.data.frame(rst)
rst <-  tbl(conn, sql("select * from nova_trouble_ticket where zone <> 'null' limit 1"))
typeof(rst)
typeof(as.data.frame(rst))
summary(as.data.frame(rst))
str(as.data.frame(rst))
strtable
devtools::source_gist('4a0a5ab9fe7e1cf3be0e'
)
strtable
print(strtable(iris), na.print='')
print(strtable(as.data.frame(rst)), na.print='')
print(strtable(as.data.frame(rst)))
print(strtable(as.data.frame(rst),"example"))
print(strtable(as.data.frame(rst),"variable"))
library(rpart)
data(kyphosis)
class(kyphosis)
apply(kyphosis,2,class)
apply(as.data.frame(rst),2,class)
library("corrplot")
library("lazy")
library("dplyrimpaladb")
library("caret")
library("rpart")
library("rpart")conn <- src_impaladb(dbname='nova', host='10.54.1.151')
conn <- src_impaladb(dbname='nova', host='10.54.1.151')
options(dplyr.jdbc.classpath = "C:/Users/R10154/Google Drive/lib/impala/new")
conn <- src_impaladb(dbname='nova', host='10.54.1.151')
result <-  tbl(conn, sql("select zone from nova.nova_trouble_ticket where zone <> 'null' group by zone order by zone"))
as.data.frame(result)
result <-  tbl(conn, sql("select zone from nova.nova_trouble_ticket where zone <> 'null' group by zone order by zone"))
as.data.frame(result)
Below is the components required :-
result <-  tbl(conn, sql("select * from nova_trouble_ticket a join active_code b on (trim(a.cause_code) = trim(b.cause_code)) join exchange_zone c ON (trim(a.exchange)=trim(c.building_id))  and (b.code <> 'PASSIVE' )
where  c.zone_name like '%ZONE KEPONG%' and a.status like '%Closed%'  and length(a.cause_category) > 1  and length(a.created_date) > 6 and length(a.closed_date) > 6 and length(a.installed_date) > 6
and a.package_name not like '%null%' and a.product not like '%null%' and a.sub_product not like '%null%'  and  length(a.description) > 10
and network_tt_id = 'null'
order by rand() limit 10000"))
names(result)
result <-  tbl(conn, sql("select * from nova_trouble_ticket a join active_code b on (trim(a.cause_code) = trim(b.cause_code)) join exchange_zone c ON (trim(a.exchange)=trim(c.building_id))  and (b.code <> 'PASSIVE' )
where  c.zone_name like '%ZONE KEPONG%' and a.status like '%Closed%'  and length(a.cause_category) > 1  and length(a.created_date) > 6 and length(a.closed_date) > 6 and length(a.installed_date) > 6
and a.package_name not like '%null%' and a.product not like '%null%' and a.sub_product not like '%null%'  and  length(a.description) > 10
and network_tt_id = 'null'
order by rand() limit 10000"))
conn <- src_impaladb(dbname='nova', host='10.54.1.151')
rst <-  tbl(conn, sql("SELECT * FROM nova_trouble_ticket limit 100"))
df1 <- as.data.frame(rst)
View(df1)
library("caret")
library("RJDBC")
library("dplyr")
library("caret")
library("corrplot")
library("lazy")
library("dplyrimpaladb")
library("rpart")
options(dplyr.jdbc.classpath = "C:\\Users\\R10154\\Google Drive\\lib\\impala")
conn <- src_impaladb(dbname='nova', host='10.54.1.151')
options(dplyr.jdbc.classpath = "C:\\Users\\R10154\\Google Drive\\lib\\impala")
conn <- src_impaladb(dbname='nova', host='10.54.1.151')
c(list.files("C:/Users/R10154/Google Drive/lib/impala/",pattern="jar$",full.names=T)
)
c(list.files("C:/Users/R10154/Google Drive/lib/impala/",pattern="jar$",full.names=T))
(abc.png)
png(height=300, width=300, pointsize=15, file="abc.png")
plot(cars)
plot(cars)
plot(cars)
plot(cars)
plot(cars)
summary(cars)
plot(cars)
plot(cars)
plot(cars)
plot(cars)
library(png)
png(height=300, width=300, pointsize=15, file="abc.png")
plot(cars)
par(mfrow = c(1,2))
img <- readPNG('abc.png')
a <- grid::grid.raster(img)
b <- grid::grid.raster(img)
img <- readPNG('abc.png')
library(png)
png(height=300, width=300, pointsize=15, file="abc.png")
plot(cars)
dev.off()
img <- readPNG('abc.png')
a <- grid::grid.raster(img)
b <- grid::grid.raster(img)
a
b
summary(airquality)
plot(airquality)
plot(airquality)
plot(airquality)
plot(airquality)
library(png)
png(height=300, width=300, pointsize=15, file="def.png")
plot(airquality)
dev.off()
grid::grid.raster(img)
grid::grid.raster(img)
img <- readPNG('def.png')
grid::grid.raster(img)
setwd("C:/Users/R10154/Google Drive/Coursera/capstone_yelt")
img1 <- readPNG('abc.png')
rasterImage(img1, 100, 300, 150, 350, interpolate = FALSE)
par(mfrow = c(2,2))
img1 <- readPNG('abc.png')
rasterImage(img1, 100, 300, 150, 350, interpolate = FALSE)
#grid::grid.raster(img1)
img2 <- readPNG('def.png')
rasterImage(img2, 100, 300, 150, 350, interpolate = FALSE)
png(height=300, width=300, pointsize=15, file="def.png")
plot(airquality)
img1
```
img3 <- readPNG('cloud1.png')
h<-dim(img3)[1]
w<-dim(img3)[2]
plot(img3)
plot(img3)
plot(img3)
install.packages("fields")
library("fields")
library("fields")
uupdate.packages("maps")
update.packages("maps")
update.packages("png")
remove.packages("png")
require(devtools)
install_version("png", version = "3.2.2", repos = "http://cran.us.r-project.org")
require(devtools)
install_version("png", version = "3.2", repos = "http://cran.us.r-project.org")
require(devtools)
install_version("png", version = "0.1-6", repos = "http://cran.us.r-project.org")
library(gridExtra)
library("png")
library("raster")
plot(0:2, 0:2, type = "n", xaxt = "n", yaxt = "n", xlab = "", ylab = "")
rasterImage(readPNG(source="abc.png"), 0, 1, 1, 2)
rasterImage(readPNG(source="cloud1.png"), 1, 1, 2, 2)
rasterImage(readPNG(source="def.png"), 0, 0, 1, 1)
rasterImage(readPNG(source="cloud1.png"), 1, 0, 2, 1)
library(png)
png(height=300, width=300, pointsize=15, file="def.png")
plot(airquality)
dev.off()
library("png")
library("raster")
plot(0:2, 0:2, type = "n", xaxt = "n", yaxt = "n", xlab = "", ylab = "")
rasterImage(readPNG(source="abc.png"), 0, 1, 1, 2)
rasterImage(readPNG(source="cloud1.png"), 1, 1, 2, 2)
rasterImage(readPNG(source="def.png"), 0, 0, 1, 1)
rasterImage(readPNG(source="cloud1.png"), 1, 0, 2, 1)
install.packages("raster")
library("png")
library("raster")
plot(0:2, 0:2, type = "n", xaxt = "n", yaxt = "n", xlab = "", ylab = "")
rasterImage(readPNG(source="abc.png"), 0, 1, 1, 2)
rasterImage(readPNG(source="cloud1.png"), 1, 1, 2, 2)
rasterImage(readPNG(source="def.png"), 0, 0, 1, 1)
rasterImage(readPNG(source="cloud1.png"), 1, 0, 2, 1)
library(png)
png(height=300, width=300, pointsize=15, file="abc.png")
plot(cars)
dev.off()
library("png")
library("raster")
plot(0:2, 0:2, type = "n", xaxt = "n", yaxt = "n", xlab = "", ylab = "")
rasterImage(readPNG(source="abc.png"), 0, 1, 1, 2)
rasterImage(readPNG(source="cloud1.png"), 1, 1, 2, 2)
rasterImage(readPNG(source="def.png"), 0, 0, 1, 1)
rasterImage(readPNG(source="cloud1.png"), 1, 0, 2, 1)
library("png")
library("raster")
plot(0:2, 0:2, type = "n", xaxt = "n", yaxt = "n", xlab = "", ylab = "")
rasterImage(readPNG(source="abc.png"), 0, 1, 1, 2)
rasterImage(readPNG(source="cloud1.png"), 1, 1, 2, 2)
rasterImage(readPNG(source="def.png"), 0, 0, 1, 1)
rasterImage(readPNG(source="cloud1.png"), 1, 0, 2, 1)
plot(0:2, type = "n", xaxt = "n", yaxt = "n", xlab = "", ylab = "")
rasterImage(readPNG(source="abc.png"), 0, 1, 1, 2)
rasterImage(readPNG(source="cloud1.png"), 0, 1, 2, 2)
library(png)
png(height=300, width=300, pointsize=15, file="abc.png")
plot(cars)
dev.off()
```{r echo=FALSE}
library(png)
png(height=1024, width=768, pointsize=15, file="abc.png")
plot(cars)
dev.off()
```
```{r echo=FALSE}
library(png)
png(height=1024, width=768, pointsize=15, file="abc.png")
plot(cars)
dev.off()
```
library(png)
png(height=1024, width=768, pointsize=15, file="abc.png")
plot(cars)
dev.off()
library(png)
png(height=600, width=600, pointsize=20, file="abc.png")
plot(cars)
dev.off()
library(png)
png(height=600, width=600, pointsize=20, file="abc.png")
plot(cars)
dev.off()
algorithm
df <- read.csv("e.csv")
#suppressWarnings(suppressMessages(odbcClose(conn)))
df_review <- as.data.frame(tolower(df$review))
df_review <-as.data.frame(sapply(df_review,gsub,pattern="[[:digit:]]",replacement=""))
df_review <-as.data.frame(sapply(df_review,gsub,pattern="[[:punct:]]",replacement=""))
df_review <-as.data.frame(sapply(df_review,gsub,pattern="@\\w+",replacement=""))
df_review <-as.data.frame(sapply(df_review,gsub,pattern="^\\s+|\\s+$",replacement=""))
df_review <-as.data.frame(sapply(df_review,gsub,pattern="[ \t]{2,}",replacement=""))
names(df_review) = "review"
df_tips <- as.data.frame(tolower(df$tips))
df_tips <-as.data.frame(sapply(df_tips,gsub,pattern="[[:digit:]]",replacement=""))
df_tips <-as.data.frame(sapply(df_tips,gsub,pattern="[[:punct:]]",replacement=""))
df_tips <-as.data.frame(sapply(df_tips,gsub,pattern="@\\w+",replacement=""))
df_tips <-as.data.frame(sapply(df_tips,gsub,pattern="^\\s+|\\s+$",replacement=""))
df_tips <-as.data.frame(sapply(df_tips,gsub,pattern="[ \t]{2,}",replacement=""))
#df_tips = as.data.frame(sapply(df_tips, try.error))
#df_tips = as.data.frame(df_tips[!is.na(df)])
names(df_tips) = "tips"
```{r echo=FALSE , fig.height=3 , fig.width=10 ,  message=F, warning=F}
class_emo = classify_emotion(df_review, algorithm="bayes", prior=1.0)
emotion = class_emo[,7]
emotion[is.na(emotion)] = "unknown"
class_pol = classify_polarity(df_review, algorithm="bayes")
# get polarity best fit
polarity = class_pol[,4]
# data frame with results
sent_df = data.frame(text=df_review, emotion=emotion,
polarity=polarity, stringsAsFactors=FALSE)
sent_df = within(sent_df,
emotion <- factor(emotion, levels=names(sort(table(emotion), decreasing=TRUE))))
df_df_review_combined <- cbind(df,sent_df)
emos = levels(factor(sent_df$emotion))
nemo = length(emos)
emo.docs = rep("", nemo)
for (i in 1:nemo)
{
tmp = df$review[emotion == emos[i]]
emo.docs[i] = paste(tmp, collapse=" ")
}
# remove stopwords
emo.docs = removeWords(emo.docs, stopwords("english"))
# create corpus
corpus = Corpus(VectorSource(emo.docs))
tdm_review = TermDocumentMatrix(corpus)
tdm_review = as.matrix(tdm_review)
colnames(tdm_review) = emos
a <- ggplot(sent_df, aes(x = emotion)) +
geom_bar(aes(y = ..count.., fill = emotion)) +
scale_fill_brewer(palette = "Dark2") +
labs(x = "emotion", y = "# review")+ labs(title =
"  Vegas Review Emotion ")
b <- ggplot(sent_df, aes(x = polarity)) +
geom_bar(aes(y = ..count.., fill = polarity)) +
scale_fill_brewer(palette = "RdGy") +
labs(x = "polarity", y = "# review") + labs(title =
"  Vegas Connotation Polarity")
#par(mfrow = c(1))
multiplot(a,b,cols = 2)
suppressWarnings(suppressMessages(library(ggplot2)))
suppressWarnings(suppressMessages(library(xlsx)))
suppressWarnings(suppressMessages(library(sentiment)))
suppressWarnings(suppressMessages(library(wordcloud)))
suppressWarnings(suppressMessages(library(RODBC)))
suppressWarnings(suppressMessages(library(pander)))
suppressWarnings(suppressMessages(library(ggmap)))
suppressWarnings(suppressMessages(library(RColorBrewer)))
suppressWarnings(suppressMessages(library(Rstem)))
suppressWarnings(suppressMessages(library(tm)))
suppressWarnings(suppressMessages(library(NLP)))
suppressWarnings(suppressMessages(library(rmarkdown)))
suppressWarnings(suppressMessages(library(gridExtra)))
suppressWarnings(suppressMessages(library(Rmisc)))
suppressWarnings(suppressMessages(library(png)))
suppressWarnings(suppressMessages(library(grid)))
suppressWarnings(suppressMessages(library(igraph)))
suppressWarnings(suppressMessages(library(RPMG)))
suppressWarnings(suppressMessages(library(Hmisc)))
class_emo = classify_emotion(df_review, algorithm="bayes", prior=1.0)
emotion = class_emo[,7]
emotion[is.na(emotion)] = "unknown"
class_pol = classify_polarity(df_review, algorithm="bayes")
# get polarity best fit
polarity = class_pol[,4]
# data frame with results
sent_df = data.frame(text=df_review, emotion=emotion,
polarity=polarity, stringsAsFactors=FALSE)
sent_df = within(sent_df,
emotion <- factor(emotion, levels=names(sort(table(emotion), decreasing=TRUE))))
df_df_review_combined <- cbind(df,sent_df)
emos = levels(factor(sent_df$emotion))
nemo = length(emos)
emo.docs = rep("", nemo)
for (i in 1:nemo)
{
tmp = df$review[emotion == emos[i]]
emo.docs[i] = paste(tmp, collapse=" ")
}
# remove stopwords
emo.docs = removeWords(emo.docs, stopwords("english"))
# create corpus
corpus = Corpus(VectorSource(emo.docs))
tdm_review = TermDocumentMatrix(corpus)
tdm_review = as.matrix(tdm_review)
colnames(tdm_review) = emos
a <- ggplot(sent_df, aes(x = emotion)) +
geom_bar(aes(y = ..count.., fill = emotion)) +
scale_fill_brewer(palette = "Dark2") +
labs(x = "emotion", y = "# review")+ labs(title =
"  Vegas Review Emotion ")
b <- ggplot(sent_df, aes(x = polarity)) +
geom_bar(aes(y = ..count.., fill = polarity)) +
scale_fill_brewer(palette = "RdGy") +
labs(x = "polarity", y = "# review") + labs(title =
"  Vegas Connotation Polarity")
#par(mfrow = c(1))
multiplot(a,b,cols = 2)
suppressWarnings(suppressMessages(comparison.cloud(tdm_review, colors = brewer.pal(nemo, "Dark2"),
scale = c(1,.5), random.order = FALSE, title.size = 1.5)))
suppressWarnings(suppressMessages(comparison.cloud(tdm_review, colors = brewer.pal(nemo, "Dark2"),
scale = c(1,.5), random.order = FALSE, title.size = 1.5 , title(main = "xxx") )))
